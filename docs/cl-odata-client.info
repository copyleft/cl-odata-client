This is cl-odata-client.info, produced by makeinfo version 6.7 from
cl-odata-client.texi.

Copyright (C) 2021 Mariano Montone

INFO-DIR-SECTION Common Lisp
START-INFO-DIR-ENTRY
* CL-ODATA-Client: (cl-odata-client)Common Lisp client for ODATA services.
END-INFO-DIR-ENTRY


File: cl-odata-client.info,  Node: Top,  Next: Intro,  Up: (dir)

Top
***

_CL-ODATA-CLIENT_ is a Common Lisp client for accessing ODATA services.

* Menu:

* Intro::
* Installation::
* Usage::
* CL-ODATA-CLIENT Basic Tutorial::
* API::
* Index::


File: cl-odata-client.info,  Node: Intro,  Next: Installation,  Prev: Top,  Up: Top

1 Introduction
**************

_CL-ODATA-CLIENT_ is a Common Lisp client for accessing ODATA services.


File: cl-odata-client.info,  Node: Installation,  Next: Usage,  Prev: Intro,  Up: Top

2 Installation
**************


File: cl-odata-client.info,  Node: Usage,  Next: CL-ODATA-CLIENT Basic Tutorial,  Prev: Installation,  Up: Top

3 Usage
*******


File: cl-odata-client.info,  Node: CL-ODATA-CLIENT Basic Tutorial,  Next: API,  Prev: Usage,  Up: Top

4 CL-ODATA-CLIENT Basic Tutorial
********************************

This is CL-ODATA-CLIENT version of TripPin tutorial.  See the original
tutorial at: <https://www.odata.org/getting-started/basic-tutorial/>

   The tutorial uses a sample service called TripPin based on OData V4.
Generally speaking, TripPin provides a service that can manage people's
trips.  The service is designed for below purposes:

   Build a service that will cover as many features for OData V4 as
possible.  Build a more real world service, and will use it to build an
end-to-end ecosystem.  Make a service reference for developers to follow
when they try to build an OData service.

   <https://services.odata.org/V4/TripPinServiceRW>

* Menu:

* Introduction::
* Requesting Data::
* Requesting an Individual Entity by ID::
* Requesting an Individual Property::
* Querying Data::
* Data Modification::
* Entities::


File: cl-odata-client.info,  Node: Introduction,  Next: Requesting Data,  Up: CL-ODATA-CLIENT Basic Tutorial

4.1 Introduction
================

The Open Data Protocol (OData) is a data access protocol built on core
protocols like HTTP and commonly accepted methodologies like REST for
the web.  There are various kinds of libraries and tools can be used to
consume OData services.  But for beginners and those who want to write
their own libraries, the pure HTTP requests and responses are also very
important.  This documentation will not cover every feature details for
OData V4 services but will try to cover various typical scenarios.  If
you want to have a more detailed understanding, please refer to OData
Documentation.

   We start by defining a package:

     (defpackage :odata.trip-pin
       (:use :cl :odata-client :odata/lang :arrows :access))

     (in-package :odata.trip-pin)

   and declaring the service urls:
     (defparameter +trip-pin-base+ "https://services.odata.org/V4/TripPinServiceRW")

   TripPin services uses a special url for read/write, so we get that:

     (defparameter +trip-pin-modify+
       (multiple-value-bind (response status headers modify-url)
           (drakma:http-request +trip-pin-base+)
         (quri:uri (princ-to-string modify-url))))


File: cl-odata-client.info,  Node: Requesting Data,  Next: Requesting an Individual Entity by ID,  Prev: Introduction,  Up: CL-ODATA-CLIENT Basic Tutorial

4.2 Requesting Data
===================

OData services support requests for data via HTTP GET requests.

* Menu:

* Requesting Entity Collections::


File: cl-odata-client.info,  Node: Requesting Entity Collections,  Up: Requesting Data

4.2.1 Requesting Entity Collections
-----------------------------------

The request below returns the the collection of Person People.

     (-> +trip-pin-modify+
         (collection "People")
         (fetch :collection))


     (((:odata-id
        . "http://services.odata.org/V4/(S(wgkqtxlasrgtwhbtgoqbxc1l))/TripPinServiceRW/People('russellwhyte')")
       (:odata-etag . "W/\"08D7983E303B2043\"")
       (:odata-edit-link
        . "http://services.odata.org/V4/(S(wgkqtxlasrgtwhbtgoqbxc1l))/TripPinServiceRW/People('russellwhyte')")
       (:user-name . "russellwhyte") (:first-name . "Russell")
       (:last-name . "Whyte") (:emails "Russell@example.com" "Russell@contoso.com")
       (:address-info
        ((:address . "187 Suffolk Ln.")
         (:city (:country-region . "United States") (:name . "Boise")
          (:region . "ID"))))
       (:gender . "Male") (:concurrency . 637145265160790083))
      ((:odata-id
        . "http://services.odata.org/V4/(S(wgkqtxlasrgtwhbtgoqbxc1l))/TripPinServiceRW/People('scottketchum')")
       (:odata-etag . "W/\"08D7983E303B2043\"")
       (:odata-edit-link
        . "http://services.odata.org/V4/(S(wgkqtxlasrgtwhbtgoqbxc1l))/TripPinServiceRW/People('scottketchum')")
       (:user-name . "scottketchum") (:first-name . "Scott")
       (:last-name . "Ketchum") (:emails "Scott@example.com")
       (:address-info
        ((:address . "2817 Milton Dr.")
         (:city (:country-region . "United States") (:name . "Albuquerque")
          (:region . "NM"))))
       (:gender . "Male") (:concurrency . 637145265160790083))
      ((:odata-id
        . "http://services.odata.org/V4/(S(wgkqtxlasrgtwhbtgoqbxc1l))/TripPinServiceRW/People('ronaldmundy')")
       (:odata-etag . "W/\"08D7983E303B2043\"")
       (:odata-edit-link
        . "http://services.odata.org/V4/(S(wgkqtxlasrgtwhbtgoqbxc1l))/TripPinServiceRW/People('ronaldmundy')")
       (:user-name . "ronaldmundy") (:first-name . "Ronald") (:last-name . "Mundy")
       (:emails "Ronald@example.com" "Ronald@contoso.com") (:address-info)
       (:gender . "Male") (:concurrency . 637145265160790083))
      ((:odata-id
        . "http://services.odata.org/V4/(S(wgkqtxlasrgtwhbtgoqbxc1l))/TripPinServiceRW/People('javieralfred')")
       (:odata-etag . "W/\"08D7983E303B2043\"")
       (:odata-edit-link
        . "http://services.odata.org/V4/(S(wgkqtxlasrgtwhbtgoqbxc1l))/TripPinServiceRW/People('javieralfred')")
       (:user-name . "javieralfred") (:first-name . "Javier")
       (:last-name . "Alfred") (:emails "Javier@example.com" "Javier@contoso.com")
       (:address-info
        ((:address . "89 Jefferson Way Suite 2")
         (:city (:country-region . "United States") (:name . "Portland")
          (:region . "WA"))))
       (:gender . "Male") (:concurrency . 637145265160790083))
      ((:odata-id
        . "http://services.odata.org/V4/(S(wgkqtxlasrgtwhbtgoqbxc1l))/TripPinServiceRW/People('willieashmore')")
       (:odata-etag . "W/\"08D7983E303B2043\"")
       (:odata-edit-link
        . "http://services.odata.org/V4/(S(wgkqtxlasrgtwhbtgoqbxc1l))/TripPinServiceRW/People('willieashmore')")
       (:user-name . "willieashmore") (:first-name . "Willie")
       (:last-name . "Ashmore") (:emails "Willie@example.com" "Willie@contoso.com")
       (:address-info) (:gender . "Male") (:concurrency . 637145265160790083))
      ((:odata-id
        . "http://services.odata.org/V4/(S(wgkqtxlasrgtwhbtgoqbxc1l))/TripPinServiceRW/People('vincentcalabrese')")
       (:odata-etag . "W/\"08D7983E303B2043\"")
       (:odata-edit-link
        . "http://services.odata.org/V4/(S(wgkqtxlasrgtwhbtgoqbxc1l))/TripPinServiceRW/People('vincentcalabrese')")
       (:user-name . "vincentcalabrese") (:first-name . "Vincent")
       (:last-name . "Calabrese")
       (:emails "Vincent@example.com" "Vincent@contoso.com")
       (:address-info
        ((:address . "55 Grizzly Peak Rd.")
         (:city (:country-region . "United States") (:name . "Butte")
          (:region . "MT"))))
       (:gender . "Male") (:concurrency . 637145265160790083))
      ((:odata-id
        . "http://services.odata.org/V4/(S(wgkqtxlasrgtwhbtgoqbxc1l))/TripPinServiceRW/People('clydeguess')")
       (:odata-etag . "W/\"08D7983E303B2043\"")
       (:odata-edit-link
        . "http://services.odata.org/V4/(S(wgkqtxlasrgtwhbtgoqbxc1l))/TripPinServiceRW/People('clydeguess')")
       (:user-name . "clydeguess") (:first-name . "Clyde") (:last-name . "Guess")
       (:emails "Clyde@example.com") (:address-info) (:gender . "Male")
       (:concurrency . 637145265160790083))
      ((:odata-id
        . "http://services.odata.org/V4/(S(wgkqtxlasrgtwhbtgoqbxc1l))/TripPinServiceRW/People('keithpinckney')")
       (:odata-etag . "W/\"08D7983E303B2043\"")
       (:odata-edit-link
        . "http://services.odata.org/V4/(S(wgkqtxlasrgtwhbtgoqbxc1l))/TripPinServiceRW/People('keithpinckney')")
       (:user-name . "keithpinckney") (:first-name . "Keith")
       (:last-name . "Pinckney") (:emails "Keith@example.com" "Keith@contoso.com")
       (:address-info) (:gender . "Male") (:concurrency . 637145265160790083)))


File: cl-odata-client.info,  Node: Requesting an Individual Entity by ID,  Next: Requesting an Individual Property,  Prev: Requesting Data,  Up: CL-ODATA-CLIENT Basic Tutorial

4.3 Requesting an Individual Entity by ID
=========================================

The request below returns an individual entity of type Person by the
given UserName "russellwhyte"

     (-> +trip-pin-modify+
         (collection "People")
         (id "russellwhyte")
         (fetch))


     ((:odata-context
       . "http://services.odata.org/V4/(S(wgkqtxlasrgtwhbtgoqbxc1l))/TripPinServiceRW/$metadata#People/$entity")
      (:odata-id
       . "http://services.odata.org/V4/(S(wgkqtxlasrgtwhbtgoqbxc1l))/TripPinServiceRW/People('russellwhyte')")
      (:odata-etag . "W/\"08D7983E303B2043\"")
      (:odata-edit-link
       . "http://services.odata.org/V4/(S(wgkqtxlasrgtwhbtgoqbxc1l))/TripPinServiceRW/People('russellwhyte')")
      (:user-name . "russellwhyte") (:first-name . "Russell") (:last-name . "Whyte")
      (:emails "Russell@example.com" "Russell@contoso.com")
      (:address-info
       ((:address . "187 Suffolk Ln.")
        (:city (:country-region . "United States") (:name . "Boise")
         (:region . "ID"))))
      (:gender . "Male") (:concurrency . 637145265160790083))


File: cl-odata-client.info,  Node: Requesting an Individual Property,  Next: Querying Data,  Prev: Requesting an Individual Entity by ID,  Up: CL-ODATA-CLIENT Basic Tutorial

4.4 Requesting an Individual Property
=====================================

To address an entity property clients append a path segment containing
property name to the URL of the entity.  If the property has a complex
type, properties of that value can be addressed by further property name
composition.  First let's take a look at how to get a simple property.
The request below returns the Name property of an Airport.

     (-> +trip-pin-modify+
         (collection "Airports")
         (id "KSFO")
         (property "Name")
         (fetch :value))


     "San Francisco International Airport"

   Then let's see how to get a property value of a complex type.  The
request below returns the Address of the complex type Location in an
Airport.

     (-> +trip-pin-modify+
         (collection "Airports")
         (id "KSFO")
         (property "Location")
         (property "Address")
         (fetch :value))


     "South McDonnell Road, San Francisco, CA 94128"


File: cl-odata-client.info,  Node: Querying Data,  Next: Data Modification,  Prev: Requesting an Individual Property,  Up: CL-ODATA-CLIENT Basic Tutorial

4.5 Querying Data
=================

OData supports various kinds of query options for querying data.  This
section will help you go through the common scenarios for these query
options.  System Query Option $filter

   The $filter system query option allows clients to filter a collection
of resources that are addressed by a request URL.  The expression
specified with $filter is evaluated for each resource in the collection,
and only items where the expression evaluates to true are included in
the response.

* Menu:

* Basic predicates, built-in functions: Basic predicates built-in functions.
* Filter on Complex Type::
* Filter on Enum Properties::
* System Query Option $orderby::
* System Query Option $top and $skip::
* System Query Option $count::
* System Query Option $expand::
* System Query Option $select::
* System Query Option $search::
* Lambda Operators::


File: cl-odata-client.info,  Node: Basic predicates built-in functions,  Next: Filter on Complex Type,  Up: Querying Data

4.5.1 Basic predicates, built-in functions
------------------------------------------

There are several kinds of basic predicates and built-in functions for
$filter, including logical operators and arithmetic operators.  For more
detailed information, please refer to OData V4 URL Conventions Document.
The request below using $filter to get people with FirstName "Scott".

   Just use raw expressions as $filter input.

     (-> +trip-pin-modify+
         (collection "People")
         ($filter "FirstName eq 'Scott'")
         (fetch :collection))


     (((:odata-id
        . "http://services.odata.org/V4/(S(wgkqtxlasrgtwhbtgoqbxc1l))/TripPinServiceRW/People('scottketchum')")
       (:odata-etag . "W/\"08D7983E303B2043\"")
       (:odata-edit-link
        . "http://services.odata.org/V4/(S(wgkqtxlasrgtwhbtgoqbxc1l))/TripPinServiceRW/People('scottketchum')")
       (:user-name . "scottketchum") (:first-name . "Scott")
       (:last-name . "Ketchum") (:emails "Scott@example.com")
       (:address-info
        ((:address . "2817 Milton Dr.")
         (:city (:country-region . "United States") (:name . "Albuquerque")
          (:region . "NM"))))
       (:gender . "Male") (:concurrency . 637145265160790083)))

   Or Lisp based expressions:

     (-> +trip-pin-modify+
         (collection "People")
         ($filter '(:= "FirstName" "Scott"))
         (fetch :collection))


     (((:odata-id
        . "http://services.odata.org/V4/(S(wgkqtxlasrgtwhbtgoqbxc1l))/TripPinServiceRW/People('scottketchum')")
       (:odata-etag . "W/\"08D7983E303B2043\"")
       (:odata-edit-link
        . "http://services.odata.org/V4/(S(wgkqtxlasrgtwhbtgoqbxc1l))/TripPinServiceRW/People('scottketchum')")
       (:user-name . "scottketchum") (:first-name . "Scott")
       (:last-name . "Ketchum") (:emails "Scott@example.com")
       (:address-info
        ((:address . "2817 Milton Dr.")
         (:city (:country-region . "United States") (:name . "Albuquerque")
          (:region . "NM"))))
       (:gender . "Male") (:concurrency . 637145265160790083)))


File: cl-odata-client.info,  Node: Filter on Complex Type,  Next: Filter on Enum Properties,  Prev: Basic predicates built-in functions,  Up: Querying Data

4.5.2 Filter on Complex Type
----------------------------

$filter can also work on complex type.  The request below returns
airports with "San Francisco" contained in its Address.  And Address is
property of complex type Location.

     (-> +trip-pin-modify+
         (collection "Airports")
         ($filter "contains(Location/Address, 'San Francisco')")
         (fetch :collection))


     (((:odata-id
        . "http://services.odata.org/V4/(S(wgkqtxlasrgtwhbtgoqbxc1l))/TripPinServiceRW/Airports('KSFO')")
       (:odata-edit-link
        . "http://services.odata.org/V4/(S(wgkqtxlasrgtwhbtgoqbxc1l))/TripPinServiceRW/Airports('KSFO')")
       (:icao-code . "KSFO") (:name . "San Francisco International Airport")
       (:iata-code . "SFO")
       (:location (:address . "South McDonnell Road, San Francisco, CA 94128")
        (:city (:country-region . "United States") (:name . "San Francisco")
         (:region . "California"))
        (:loc (:type . "Point") (:coordinates -122.374725 37.61889)
         (:crs (:type . "name") (:properties (:name . "EPSG:4326")))))))

     (-> +trip-pin-modify+
         (collection "Airports")
         ($filter '(:contains "Location/Address" "San Francisco"))
         (fetch :collection))


     (((:odata-id
        . "http://services.odata.org/V4/(S(wgkqtxlasrgtwhbtgoqbxc1l))/TripPinServiceRW/Airports('KSFO')")
       (:odata-edit-link
        . "http://services.odata.org/V4/(S(wgkqtxlasrgtwhbtgoqbxc1l))/TripPinServiceRW/Airports('KSFO')")
       (:icao-code . "KSFO") (:name . "San Francisco International Airport")
       (:iata-code . "SFO")
       (:location (:address . "South McDonnell Road, San Francisco, CA 94128")
        (:city (:country-region . "United States") (:name . "San Francisco")
         (:region . "California"))
        (:loc (:type . "Point") (:coordinates -122.374725 37.61889)
         (:crs (:type . "name") (:properties (:name . "EPSG:4326")))))))


File: cl-odata-client.info,  Node: Filter on Enum Properties,  Next: System Query Option $orderby,  Prev: Filter on Complex Type,  Up: Querying Data

4.5.3 Filter on Enum Properties
-------------------------------

The request below returns all female People of entity type Person.  The
Gender is a property of Enum type.

     (-> +trip-pin-modify+
         (collection "People")
         ($filter `(:eq "Gender" ,+person-gender/female+))
         (fetch :collection))


     (((:odata-id
        . "http://services.odata.org/V4/(S(wgkqtxlasrgtwhbtgoqbxc1l))/TripPinServiceRW/People('elainestewart')")
       (:odata-etag . "W/\"08D7983E303B2043\"")
       (:odata-edit-link
        . "http://services.odata.org/V4/(S(wgkqtxlasrgtwhbtgoqbxc1l))/TripPinServiceRW/People('elainestewart')")
       (:user-name . "elainestewart") (:first-name . "Elaine")
       (:last-name . "Stewart") (:emails "Elaine@example.com" "Elaine@contoso.com")
       (:address-info) (:gender . "Female") (:concurrency . 637145265160790083))
      ((:odata-id
        . "http://services.odata.org/V4/(S(wgkqtxlasrgtwhbtgoqbxc1l))/TripPinServiceRW/People('salliesampson')")
       (:odata-etag . "W/\"08D7983E303B2043\"")
       (:odata-edit-link
        . "http://services.odata.org/V4/(S(wgkqtxlasrgtwhbtgoqbxc1l))/TripPinServiceRW/People('salliesampson')")
       (:user-name . "salliesampson") (:first-name . "Sallie")
       (:last-name . "Sampson") (:emails "Sallie@example.com" "Sallie@contoso.com")
       (:address-info
        ((:address . "87 Polk St. Suite 5")
         (:city (:country-region . "United States") (:name . "San Francisco")
          (:region . "CA")))
        ((:address . "89 Chiaroscuro Rd.")
         (:city (:country-region . "United States") (:name . "Portland")
          (:region . "OR"))))
       (:gender . "Female") (:concurrency . 637145265160790083))
      ((:odata-id
        . "http://services.odata.org/V4/(S(wgkqtxlasrgtwhbtgoqbxc1l))/TripPinServiceRW/People('jonirosales')")
       (:odata-etag . "W/\"08D7983E303B2043\"")
       (:odata-edit-link
        . "http://services.odata.org/V4/(S(wgkqtxlasrgtwhbtgoqbxc1l))/TripPinServiceRW/People('jonirosales')")
       (:user-name . "jonirosales") (:first-name . "Joni") (:last-name . "Rosales")
       (:emails "Joni@example.com" "Joni@contoso.com") (:address-info)
       (:gender . "Female") (:concurrency . 637145265160790083))
      ((:odata-id
        . "http://services.odata.org/V4/(S(wgkqtxlasrgtwhbtgoqbxc1l))/TripPinServiceRW/People('georginabarlow')")
       (:odata-etag . "W/\"08D7983E303B2043\"")
       (:odata-edit-link
        . "http://services.odata.org/V4/(S(wgkqtxlasrgtwhbtgoqbxc1l))/TripPinServiceRW/People('georginabarlow')")
       (:user-name . "georginabarlow") (:first-name . "Georgina")
       (:last-name . "Barlow")
       (:emails "Georgina@example.com" "Georgina@contoso.com") (:address-info)
       (:gender . "Female") (:concurrency . 637145265160790083))
      ((:odata-id
        . "http://services.odata.org/V4/(S(wgkqtxlasrgtwhbtgoqbxc1l))/TripPinServiceRW/People('angelhuffman')")
       (:odata-etag . "W/\"08D7983E303B2043\"")
       (:odata-edit-link
        . "http://services.odata.org/V4/(S(wgkqtxlasrgtwhbtgoqbxc1l))/TripPinServiceRW/People('angelhuffman')")
       (:user-name . "angelhuffman") (:first-name . "Angel")
       (:last-name . "Huffman") (:emails "Angel@example.com") (:address-info)
       (:gender . "Female") (:concurrency . 637145265160790083))
      ((:odata-id
        . "http://services.odata.org/V4/(S(wgkqtxlasrgtwhbtgoqbxc1l))/TripPinServiceRW/People('laurelosborn')")
       (:odata-etag . "W/\"08D7983E303B2043\"")
       (:odata-edit-link
        . "http://services.odata.org/V4/(S(wgkqtxlasrgtwhbtgoqbxc1l))/TripPinServiceRW/People('laurelosborn')")
       (:user-name . "laurelosborn") (:first-name . "Laurel")
       (:last-name . "Osborn") (:emails "Laurel@example.com" "Laurel@contoso.com")
       (:address-info) (:gender . "Female") (:concurrency . 637145265160790083))
      ((:odata-id
        . "http://services.odata.org/V4/(S(wgkqtxlasrgtwhbtgoqbxc1l))/TripPinServiceRW/People('sandyosborn')")
       (:odata-etag . "W/\"08D7983E303B2043\"")
       (:odata-edit-link
        . "http://services.odata.org/V4/(S(wgkqtxlasrgtwhbtgoqbxc1l))/TripPinServiceRW/People('sandyosborn')")
       (:user-name . "sandyosborn") (:first-name . "Sandy") (:last-name . "Osborn")
       (:emails "Sandy@example.com" "Sandy@contoso.com") (:address-info)
       (:gender . "Female") (:concurrency . 637145265160790083))
      ((:odata-id
        . "http://services.odata.org/V4/(S(wgkqtxlasrgtwhbtgoqbxc1l))/TripPinServiceRW/People('ursulabright')")
       (:odata-etag . "W/\"08D7983E303B2043\"")
       (:odata-edit-link
        . "http://services.odata.org/V4/(S(wgkqtxlasrgtwhbtgoqbxc1l))/TripPinServiceRW/People('ursulabright')")
       (:user-name . "ursulabright") (:first-name . "Ursula")
       (:last-name . "Bright") (:emails "Ursula@example.com" "Ursula@contoso.com")
       (:address-info) (:gender . "Female") (:concurrency . 637145265160790083)))


File: cl-odata-client.info,  Node: System Query Option $orderby,  Next: System Query Option $top and $skip,  Prev: Filter on Enum Properties,  Up: Querying Data

4.5.4 System Query Option $orderby
----------------------------------

The $orderby system query option allows clients to request resources in
either ascending order using asc or descending order using desc.  If asc
or desc not specified, then the resources will be ordered in ascending
order.  The request below orders Trips on property EndsAt in descending
order.

     (-> +trip-pin-modify+
         (collection "People")
         (id "scottketchum")
         (property "Trips")
         ($orderby "EndsAt" :desc)
         (fetch :collection))


     (((:trip-id . 2004) (:share-id . "f94e9116-8bdd-4dac-ab61-08438d0d9a71")
       (:description . "Trip from Shanghai to Beijing") (:name . "Trip in Beijing")
       (:budget . 11000) (:starts-at . "2014-02-01T00:00:00Z")
       (:ends-at . "2014-02-04T00:00:00Z") (:tags "Travel" "Beijing"))
      ((:trip-id . 0) (:share-id . "9d9b2fa0-efbf-490e-a5e3-bac8f7d47354")
       (:description
        . "Trip from San Francisco to New York City. Nice trip with two friends. It is a 4 days' trip. We actually had a client meeting, but we also took one to go sightseeings in New York.")
       (:name . "Trip in US") (:budget . 3000) (:starts-at . "2014-01-01T00:00:00Z")
       (:ends-at . "2014-01-04T00:00:00Z")
       (:tags "Trip in New York" "business" "sightseeing")))


File: cl-odata-client.info,  Node: System Query Option $top and $skip,  Next: System Query Option $count,  Prev: System Query Option $orderby,  Up: Querying Data

4.5.5 System Query Option $top and $skip
----------------------------------------

The $top system query option requests the number of items in the queried
collection to be included in the result.  The $skip query option
requests the number of items in the queried collection that are to be
skipped and not included in the result.  The request below returns the
first two people of the People entity set.

     (-> +trip-pin-modify+
         (collection "People")
         ($top 2)
         (fetch :collection))


     (((:odata-id
        . "http://services.odata.org/V4/(S(dbwnjvoyanwfvbktg1eu5zvg))/TripPinServiceRW/People('russellwhyte')")
       (:odata-etag . "W/\"08D799E6ED7BA93B\"")
       (:odata-edit-link
        . "http://services.odata.org/V4/(S(dbwnjvoyanwfvbktg1eu5zvg))/TripPinServiceRW/People('russellwhyte')")
       (:user-name . "russellwhyte") (:first-name . "Russell")
       (:last-name . "Whyte") (:emails "Russell@example.com" "Russell@contoso.com")
       (:address-info
        ((:address . "187 Suffolk Ln.")
         (:city (:country-region . "United States") (:name . "Boise")
          (:region . "ID"))))
       (:gender . "Male") (:concurrency . 637147089402046779))
      ((:odata-id
        . "http://services.odata.org/V4/(S(dbwnjvoyanwfvbktg1eu5zvg))/TripPinServiceRW/People('scottketchum')")
       (:odata-etag . "W/\"08D799E6ED7BA93B\"")
       (:odata-edit-link
        . "http://services.odata.org/V4/(S(dbwnjvoyanwfvbktg1eu5zvg))/TripPinServiceRW/People('scottketchum')")
       (:user-name . "scottketchum") (:first-name . "Scott")
       (:last-name . "Ketchum") (:emails "Scott@example.com")
       (:address-info
        ((:address . "2817 Milton Dr.")
         (:city (:country-region . "United States") (:name . "Albuquerque")
          (:region . "NM"))))
       (:gender . "Male") (:concurrency . 637147089402046779)))

   The request below returns people starting with the 19th people of the
entity set People

     (-> +trip-pin-modify+
         (collection "People")
         ($skip 18)
         (fetch :collection))


     (((:odata-id
        . "http://services.odata.org/V4/(S(dbwnjvoyanwfvbktg1eu5zvg))/TripPinServiceRW/People('genevievereeves')")
       (:odata-etag . "W/\"08D799E6ED7BA93B\"")
       (:odata-edit-link
        . "http://services.odata.org/V4/(S(dbwnjvoyanwfvbktg1eu5zvg))/TripPinServiceRW/People('genevievereeves')")
       (:user-name . "genevievereeves") (:first-name . "Genevieve")
       (:last-name . "Reeves")
       (:emails "Genevieve@example.com" "Genevieve@contoso.com") (:address-info)
       (:gender . "Female") (:concurrency . 637147089402046779))
      ((:odata-id
        . "http://services.odata.org/V4/(S(dbwnjvoyanwfvbktg1eu5zvg))/TripPinServiceRW/People('kristakemp')")
       (:odata-etag . "W/\"08D799E6ED7BA93B\"")
       (:odata-edit-link
        . "http://services.odata.org/V4/(S(dbwnjvoyanwfvbktg1eu5zvg))/TripPinServiceRW/People('kristakemp')")
       (:user-name . "kristakemp") (:first-name . "Krista") (:last-name . "Kemp")
       (:emails "Krista@example.com") (:address-info) (:gender . "Female")
       (:concurrency . 637147089402046779)))


File: cl-odata-client.info,  Node: System Query Option $count,  Next: System Query Option $expand,  Prev: System Query Option $top and $skip,  Up: Querying Data

4.5.6 System Query Option $count
--------------------------------

The $count system query option allows clients to request a count of the
matching resources included with the resources in the response.  The
request below returns the total number of people in the collection.


File: cl-odata-client.info,  Node: System Query Option $expand,  Next: System Query Option $select,  Prev: System Query Option $count,  Up: Querying Data

4.5.7 System Query Option $expand
---------------------------------

The $expand system query option specifies the related resources to be
included in line with retrieved resources.  The request below returns
people with navigation property Friends of a Person

     (-> +trip-pin-modify+
         (collection "People")
         (id "keithpinckney")
         ($expand "Friends")
         (fetch))


     ((:odata-context
       . "http://services.odata.org/V4/(S(dbwnjvoyanwfvbktg1eu5zvg))/TripPinServiceRW/$metadata#People/$entity")
      (:odata-id
       . "http://services.odata.org/V4/(S(dbwnjvoyanwfvbktg1eu5zvg))/TripPinServiceRW/People('keithpinckney')")
      (:odata-etag . "W/\"08D799E6ED7BA93B\"")
      (:odata-edit-link
       . "http://services.odata.org/V4/(S(dbwnjvoyanwfvbktg1eu5zvg))/TripPinServiceRW/People('keithpinckney')")
      (:user-name . "keithpinckney") (:first-name . "Keith")
      (:last-name . "Pinckney") (:emails "Keith@example.com" "Keith@contoso.com")
      (:address-info) (:gender . "Male") (:concurrency . 637147089402046779)
      (:friends
       ((:odata-id
         . "http://services.odata.org/V4/(S(dbwnjvoyanwfvbktg1eu5zvg))/TripPinServiceRW/People('clydeguess')")
        (:odata-etag . "W/\"08D799E6ED7BA93B\"")
        (:odata-edit-link
         . "http://services.odata.org/V4/(S(dbwnjvoyanwfvbktg1eu5zvg))/TripPinServiceRW/People('clydeguess')")
        (:user-name . "clydeguess") (:first-name . "Clyde") (:last-name . "Guess")
        (:emails "Clyde@example.com") (:address-info) (:gender . "Male")
        (:concurrency . 637147089402046779))
       ((:odata-id
         . "http://services.odata.org/V4/(S(dbwnjvoyanwfvbktg1eu5zvg))/TripPinServiceRW/People('marshallgaray')")
        (:odata-etag . "W/\"08D799E6ED7BA93B\"")
        (:odata-edit-link
         . "http://services.odata.org/V4/(S(dbwnjvoyanwfvbktg1eu5zvg))/TripPinServiceRW/People('marshallgaray')")
        (:user-name . "marshallgaray") (:first-name . "Marshall")
        (:last-name . "Garay")
        (:emails "Marshall@example.com" "Marshall@contoso.com") (:address-info)
        (:gender . "Male") (:concurrency . 637147089402046779))))


File: cl-odata-client.info,  Node: System Query Option $select,  Next: System Query Option $search,  Prev: System Query Option $expand,  Up: Querying Data

4.5.8 System Query Option $select
---------------------------------

The $select system query option allows the clients to requests a limited
set of properties for each entity or complex type.  The request below
returns Name and IcaoCode of all Airports.

     (-> +trip-pin-modify+
         (collection "Airports")
         ($select '("Name" "IcaoCode"))
         (fetch :collection))


     (((:odata-id
        . "http://services.odata.org/V4/(S(dbwnjvoyanwfvbktg1eu5zvg))/TripPinServiceRW/Airports('KSFO')")
       (:odata-edit-link
        . "http://services.odata.org/V4/(S(dbwnjvoyanwfvbktg1eu5zvg))/TripPinServiceRW/Airports('KSFO')")
       (:name . "San Francisco International Airport") (:icao-code . "KSFO"))
      ((:odata-id
        . "http://services.odata.org/V4/(S(dbwnjvoyanwfvbktg1eu5zvg))/TripPinServiceRW/Airports('KLAX')")
       (:odata-edit-link
        . "http://services.odata.org/V4/(S(dbwnjvoyanwfvbktg1eu5zvg))/TripPinServiceRW/Airports('KLAX')")
       (:name . "Los Angeles International Airport") (:icao-code . "KLAX"))
      ((:odata-id
        . "http://services.odata.org/V4/(S(dbwnjvoyanwfvbktg1eu5zvg))/TripPinServiceRW/Airports('ZSSS')")
       (:odata-edit-link
        . "http://services.odata.org/V4/(S(dbwnjvoyanwfvbktg1eu5zvg))/TripPinServiceRW/Airports('ZSSS')")
       (:name . "Shanghai Hongqiao International Airport") (:icao-code . "ZSSS"))
      ((:odata-id
        . "http://services.odata.org/V4/(S(dbwnjvoyanwfvbktg1eu5zvg))/TripPinServiceRW/Airports('ZBAA')")
       (:odata-edit-link
        . "http://services.odata.org/V4/(S(dbwnjvoyanwfvbktg1eu5zvg))/TripPinServiceRW/Airports('ZBAA')")
       (:name . "Beijing Capital International Airport") (:icao-code . "ZBAA"))
      ((:odata-id
        . "http://services.odata.org/V4/(S(dbwnjvoyanwfvbktg1eu5zvg))/TripPinServiceRW/Airports('KJFK')")
       (:odata-edit-link
        . "http://services.odata.org/V4/(S(dbwnjvoyanwfvbktg1eu5zvg))/TripPinServiceRW/Airports('KJFK')")
       (:name . "John F. Kennedy International Airport") (:icao-code . "KJFK"))
      ((:odata-id
        . "http://services.odata.org/V4/(S(dbwnjvoyanwfvbktg1eu5zvg))/TripPinServiceRW/Airports('LIRA')")
       (:odata-edit-link
        . "http://services.odata.org/V4/(S(dbwnjvoyanwfvbktg1eu5zvg))/TripPinServiceRW/Airports('LIRA')")
       (:name . "Rome Ciampino Airport") (:icao-code . "LIRA"))
      ((:odata-id
        . "http://services.odata.org/V4/(S(dbwnjvoyanwfvbktg1eu5zvg))/TripPinServiceRW/Airports('CYYZ')")
       (:odata-edit-link
        . "http://services.odata.org/V4/(S(dbwnjvoyanwfvbktg1eu5zvg))/TripPinServiceRW/Airports('CYYZ')")
       (:name . "Toronto Pearson International Airport") (:icao-code . "CYYZ"))
      ((:odata-id
        . "http://services.odata.org/V4/(S(dbwnjvoyanwfvbktg1eu5zvg))/TripPinServiceRW/Airports('YSSY')")
       (:odata-edit-link
        . "http://services.odata.org/V4/(S(dbwnjvoyanwfvbktg1eu5zvg))/TripPinServiceRW/Airports('YSSY')")
       (:name . "Sydney Airport") (:icao-code . "YSSY")))


File: cl-odata-client.info,  Node: System Query Option $search,  Next: Lambda Operators,  Prev: System Query Option $select,  Up: Querying Data

4.5.9 System Query Option $search
---------------------------------

The $search system query option restricts the result to include only
those entities matching the specified search expression.  The definition
of what it means to match is dependent upon the implementation.  The
request below get all People who has 'Boise' in their contents.

   serviceRoot/People?$search=United

     (-> +trip-pin-modify+
         (collection "People")
         ($search "United")
         (fetch :collection))


     (((:odata-id
        . "http://services.odata.org/V4/(S(jreo0syd1dcfhrharzudcfgy))/TripPinServiceRW/People('russellwhyte')")
       (:odata-etag . "W/\"08D79AA36F81DD60\"")
       (:odata-edit-link
        . "http://services.odata.org/V4/(S(jreo0syd1dcfhrharzudcfgy))/TripPinServiceRW/People('russellwhyte')")
       (:user-name . "russellwhyte") (:first-name . "Russell")
       (:last-name . "Whyte") (:emails "Russell@example.com" "Russell@contoso.com")
       (:address-info
        ((:address . "187 Suffolk Ln.")
         (:city (:country-region . "United States") (:name . "Boise")
          (:region . "ID"))))
       (:gender . "Male") (:concurrency . 637147899037343072))
      ((:odata-id
        . "http://services.odata.org/V4/(S(jreo0syd1dcfhrharzudcfgy))/TripPinServiceRW/People('scottketchum')")
       (:odata-etag . "W/\"08D79AA36F81DD60\"")
       (:odata-edit-link
        . "http://services.odata.org/V4/(S(jreo0syd1dcfhrharzudcfgy))/TripPinServiceRW/People('scottketchum')")
       (:user-name . "scottketchum") (:first-name . "Scott")
       (:last-name . "Ketchum") (:emails "Scott@example.com")
       (:address-info
        ((:address . "2817 Milton Dr.")
         (:city (:country-region . "United States") (:name . "Albuquerque")
          (:region . "NM"))))
       (:gender . "Male") (:concurrency . 637147899037343072))
      ((:odata-id
        . "http://services.odata.org/V4/(S(jreo0syd1dcfhrharzudcfgy))/TripPinServiceRW/People('javieralfred')")
       (:odata-etag . "W/\"08D79AA36F81DD60\"")
       (:odata-edit-link
        . "http://services.odata.org/V4/(S(jreo0syd1dcfhrharzudcfgy))/TripPinServiceRW/People('javieralfred')")
       (:user-name . "javieralfred") (:first-name . "Javier")
       (:last-name . "Alfred") (:emails "Javier@example.com" "Javier@contoso.com")
       (:address-info
        ((:address . "89 Jefferson Way Suite 2")
         (:city (:country-region . "United States") (:name . "Portland")
          (:region . "WA"))))
       (:gender . "Male") (:concurrency . 637147899037343072))
      ((:odata-id
        . "http://services.odata.org/V4/(S(jreo0syd1dcfhrharzudcfgy))/TripPinServiceRW/People('vincentcalabrese')")
       (:odata-etag . "W/\"08D79AA36F81DD60\"")
       (:odata-edit-link
        . "http://services.odata.org/V4/(S(jreo0syd1dcfhrharzudcfgy))/TripPinServiceRW/People('vincentcalabrese')")
       (:user-name . "vincentcalabrese") (:first-name . "Vincent")
       (:last-name . "Calabrese")
       (:emails "Vincent@example.com" "Vincent@contoso.com")
       (:address-info
        ((:address . "55 Grizzly Peak Rd.")
         (:city (:country-region . "United States") (:name . "Butte")
          (:region . "MT"))))
       (:gender . "Male") (:concurrency . 637147899037343072))
      ((:odata-id
        . "http://services.odata.org/V4/(S(jreo0syd1dcfhrharzudcfgy))/TripPinServiceRW/People('salliesampson')")
       (:odata-etag . "W/\"08D79AA36F81DD60\"")
       (:odata-edit-link
        . "http://services.odata.org/V4/(S(jreo0syd1dcfhrharzudcfgy))/TripPinServiceRW/People('salliesampson')")
       (:user-name . "salliesampson") (:first-name . "Sallie")
       (:last-name . "Sampson") (:emails "Sallie@example.com" "Sallie@contoso.com")
       (:address-info
        ((:address . "87 Polk St. Suite 5")
         (:city (:country-region . "United States") (:name . "San Francisco")
          (:region . "CA")))
        ((:address . "89 Chiaroscuro Rd.")
         (:city (:country-region . "United States") (:name . "Portland")
          (:region . "OR"))))
       (:gender . "Female") (:concurrency . 637147899037343072)))


File: cl-odata-client.info,  Node: Lambda Operators,  Prev: System Query Option $search,  Up: Querying Data

4.5.10 Lambda Operators
-----------------------

OData defines two operators any and all that evaluate a Boolean
expression on a collection.  They can work on either collection
properties or collection of entities.

   The request below returns People with Emails containing
"ll@contoso.com".  The Emails is a collection of primitive type string.

   GET serviceRoot/People?$filter=Emails/any(s:endswith(s,
'contoso.com'))


File: cl-odata-client.info,  Node: Data Modification,  Next: Entities,  Prev: Querying Data,  Up: CL-ODATA-CLIENT Basic Tutorial

4.6 Data Modification
=====================

Updatable OData services support Create, Update and Delete operation for
some or all exposed entities.

* Menu:

* Create an Entity::
* Remove an Entity::
* Update an Entity::
* Relationship Operations::
* Change a Link::
* Functions and Actions::
* Invoking Bound Functions::
* Invoking Unbound Actions::
* Invoking Bound Actions::


File: cl-odata-client.info,  Node: Create an Entity,  Next: Remove an Entity,  Up: Data Modification

4.6.1 Create an Entity
----------------------

To create an entity in a collection, the client sends a POST request to
that collection's URL.  The POST body MUST contain a single valid entity
representation.  The request below creates a Person which contains
complex type and collection property.


     (defparameter *p* '(("@odata.type" . "Microsoft.OData.SampleService.Models.TripPin.Person")
                                   ("UserName" . "teresa")
                                   ("FirstName" . "Teresa")
                                   ("LastName" . "Gilbert")
                                   ("Gender" . "Female")
                                   ("Emails" . ("teresa@example.com" "teresa@contoso.com"))
                                   ("AddressInfo" . ((("Address" . "1 Suffolk Ln.")
                                                     ("City" . (("CountryRegion" . "United States")
                                                                ("Name" . "Boise")
                                                                ("Region" . "ID"))))))))

     (princ
       (-> +trip-pin-modify+
         (collection "People")
         (post *p*)))


     ((odata-context
       . http://services.odata.org/V4/(S(dbwnjvoyanwfvbktg1eu5zvg))/TripPinServiceRW/$metadata#People/$entity)
      (odata-id
       . http://services.odata.org/V4/(S(dbwnjvoyanwfvbktg1eu5zvg))/TripPinServiceRW/People('teresa'))
      (odata-etag . W/"08D799ECFD4995C4")
      (odata-edit-link
       . http://services.odata.org/V4/(S(dbwnjvoyanwfvbktg1eu5zvg))/TripPinServiceRW/People('teresa'))
      (user-name . teresa) (first-name . Teresa) (last-name . Gilbert)
      (emails teresa@example.com teresa@contoso.com)
      (address-info
       ((address . 1 Suffolk Ln.)
        (city (country-region . United States) (name . Boise) (region . ID))))
      (gender . Female) (concurrency . 637147115437004228))


File: cl-odata-client.info,  Node: Remove an Entity,  Next: Update an Entity,  Prev: Create an Entity,  Up: Data Modification

4.6.2 Remove an Entity
----------------------

The request below deletes the Person with UserName 'vincentcalabrese'.
DELETE serviceRoot/People('vincentcalabrese')

     (-> +trip-pin-modify+
         (collection "People")
         (id "vincentcalabrese")
         (del))


     nil


File: cl-odata-client.info,  Node: Update an Entity,  Next: Relationship Operations,  Prev: Remove an Entity,  Up: Data Modification

4.6.3 Update an Entity
----------------------

The OData services SHOULD support PATCH as the preferred means of
updating an entity.  But also services MAY additionally support PUT.
The request below update the Emails of a person using PATCH.

     (-> +trip-pin-modify+
        (collection "People")
        (id "russellwhyte")
        (update '(("@odata.type" . "Microsoft.OData.SampleService.Models.TripPin.Person")
                  ("Emails" . ("Russell@example.com" "Russell@contoso.com" "newRussell@contoso.com")))))


File: cl-odata-client.info,  Node: Relationship Operations,  Next: Change a Link,  Prev: Update an Entity,  Up: Data Modification

4.6.4 Relationship Operations
-----------------------------

Relationships from one entity to another are represented as navigation
properties.  Link to Related Entities

   A successful POST request to a navigation property's references
collection adds a relationship to an existing entity.  The request below
adds 'vincentcalabrese' to friends of 'scottketchum'.

     (-> +trip-pin-modify+
        (collection "People") (id "scottketchum")
        (property "Friends") ($ref)
        (link `(("@odata.context" . ,(quri:render-uri +trip-pin-modify+))
                ("@odata.id" . "People('vincentcalabrese')"))))


     nil


File: cl-odata-client.info,  Node: Change a Link,  Next: Functions and Actions,  Prev: Relationship Operations,  Up: Data Modification

4.6.5 Change a Link
-------------------

A successful PUT request to a single-valued navigation property’s
reference resource changes the related entity.  The request below change
the Airline of a Flight.

     (-> +trip-pin-modify+
                   (collection "People")
                   (id "russellwhyte")
                   (path "Trips(0)"
                         "PlanItems(11)"
                         "Microsoft.OData.SampleService.Models.TripPin.Flight"
                         "Airline")
                   (update-link `(("@odata.context" . ,(quri:render-uri +trip-pin-modify+))
                ("@odata.id" . "Airlines('FM')"))))


     nil


File: cl-odata-client.info,  Node: Functions and Actions,  Next: Invoking Bound Functions,  Prev: Change a Link,  Up: Data Modification

4.6.6 Functions and Actions
---------------------------

OData supports custom operations (Actions and Functions).  Functions are
operations exposed by an OData service that MUST return data and MUST
have no observable side effects.  Actions are operations exposed by an
OData service that MAY have side effects when invoked.  Functions and
actions both MAY bound to an entity type, primitive type, complex type,
or a collection.

  1. Invoking Unbound Functions

     The function below returns the nearest airport with the input
     geography point.

          (-> +trip-pin-modify+
              (fcall 'get-nearest-airport :lat 33 :lon -118)
              (fetch))


          ((:odata-context
            . "http://services.odata.org/V4/(S(jreo0syd1dcfhrharzudcfgy))/TripPinServiceRW/$metadata#Airports/$entity")
           (:odata-id
            . "http://services.odata.org/V4/(S(jreo0syd1dcfhrharzudcfgy))/TripPinServiceRW/Airports('KLAX')")
           (:odata-edit-link
            . "http://services.odata.org/V4/(S(jreo0syd1dcfhrharzudcfgy))/TripPinServiceRW/Airports('KLAX')")
           (:icao-code . "KLAX") (:name . "Los Angeles International Airport")
           (:iata-code . "LAX")
           (:location (:address . "1 World Way, Los Angeles, CA, 90045")
            (:city (:country-region . "United States") (:name . "Los Angeles")
             (:region . "California"))
            (:loc (:type . "Point") (:coordinates -118.40806 33.9425)
             (:crs (:type . "name") (:properties (:name . "EPSG:4326"))))))


File: cl-odata-client.info,  Node: Invoking Bound Functions,  Next: Invoking Unbound Actions,  Prev: Functions and Actions,  Up: Data Modification

4.6.7 Invoking Bound Functions
------------------------------

The request below returns the favorite airline of a person, in TripPin
service, "favorite airline" means airline which user choose most times.
The function GetFavoriteAirline() is bound to Person.

     (-> +trip-pin-modify+
         (collection "People")
         (id "russellwhyte")
         (fcall "Microsoft.OData.SampleService.Models.TripPin.GetFavoriteAirline")
         (fetch))


     ((:odata-context
       . "http://services.odata.org/V4/(S(jreo0syd1dcfhrharzudcfgy))/TripPinServiceRW/$metadata#Airlines/$entity")
      (:odata-id
       . "http://services.odata.org/V4/(S(jreo0syd1dcfhrharzudcfgy))/TripPinServiceRW/Airlines('AA')")
      (:odata-edit-link
       . "http://services.odata.org/V4/(S(jreo0syd1dcfhrharzudcfgy))/TripPinServiceRW/Airlines('AA')")
      (:airline-code . "AA") (:name . "American Airlines"))


File: cl-odata-client.info,  Node: Invoking Unbound Actions,  Next: Invoking Bound Actions,  Prev: Invoking Bound Functions,  Up: Data Modification

4.6.8 Invoking Unbound Actions
------------------------------

TripPin currently has no scenario supported for unbound actions.


File: cl-odata-client.info,  Node: Invoking Bound Actions,  Prev: Invoking Unbound Actions,  Up: Data Modification

4.6.9 Invoking Bound Actions
----------------------------

The action below shares a trip to one of his friend.  In TripPin
service, by "share a trip" we mean that the owner and his friend now
both have the trip and the trip share the same ShareId property.

     (-> +trip-pin-modify+
         (collection "People")
         (id "russellwhyte")
         (path "Microsoft.OData.SampleService.Models.TripPin.ShareTrip")
         (post '(("userName" . "scottketchum")
                 ("tripId" . 0))))


     nil


File: cl-odata-client.info,  Node: Entities,  Prev: Data Modification,  Up: CL-ODATA-CLIENT Basic Tutorial

4.7 Entities
============

Instead of working with raw data (Lisp association lists), it is also
possible to work with wrapping CLOS objects, available in the
ODATA/ENTITY package.

   Use 'T' as parameter to 'fetch'.  Instead of association lists, we
get 'ENTITY' objects:

     (-> +trip-pin-modify+
         (collection "People")
         (fetch t))

     #<http://services.odata.org/V4/(S(4olvgljic51nt3x0pqp5mpbl))/TripPinServiceRW/$metadata#People>

   The elements of an entity set can be accessed with
'ODATA/ENTITY:ENTITY-SET-ELEMENTS':

     (-> +trip-pin-modify+
         (collection "People")
         (fetch t)
         (odata/entity:entity-set-elements))

     (#<http://services.odata.org/V4/(S(4olvgljic51nt3x0pqp5mpbl))/TripPinServiceRW/People('russellwhyte')>
      #<http://services.odata.org/V4/(S(4olvgljic51nt3x0pqp5mpbl))/TripPinServiceRW/People('scottketchum')>
      #<http://services.odata.org/V4/(S(4olvgljic51nt3x0pqp5mpbl))/TripPinServiceRW/People('ronaldmundy')>
      #<http://services.odata.org/V4/(S(4olvgljic51nt3x0pqp5mpbl))/TripPinServiceRW/People('javieralfred')>
      #<http://services.odata.org/V4/(S(4olvgljic51nt3x0pqp5mpbl))/TripPinServiceRW/People('willieashmore')>
      #<http://services.odata.org/V4/(S(4olvgljic51nt3x0pqp5mpbl))/TripPinServiceRW/People('vincentcalabrese')>
      #<http://services.odata.org/V4/(S(4olvgljic51nt3x0pqp5mpbl))/TripPinServiceRW/People('clydeguess')>
      #<http://services.odata.org/V4/(S(4olvgljic51nt3x0pqp5mpbl))/TripPinServiceRW/People('keithpinckney')>)

   As you can see, the elements of the entity set are also entities
(wrapped objects).

   To access entity objects, you can use either
ODATA/ENTITY:GET-PROPERTY or ODATA/ENTITY:WITH-PROPERTIES macro:

     (let ((russell (-> +trip-pin-modify+
                        (collection "People")
                        (id "russellwhyte")
                        (fetch t))))
       (odata/entity:get-property russell :user-name))

     russellwhyte

     (let ((russell (-> +trip-pin-modify+
                        (collection "People")
                        (id "russellwhyte")
                        (fetch t))))
       (odata/entity:with-properties (user-name) russell
         (concatenate 'string "Hello " user-name)))

     Hello russellwhyte

   One of the advantages of using entities over raw data is that you can
call the api using entities as base, like in this example:

       ;; We get russell user entity first
     (let ((russell (-> +trip-pin-modify+
                        (collection "People")
                        (id "russellwhyte")
                        (fetch t))))
       ;; Then we use the entity as base for new api call and fetch its friends
       (-> russell
           (collection "Friends")
           (fetch t)))

     #<http://services.odata.org/V4/(S(4olvgljic51nt3x0pqp5mpbl))/TripPinServiceRW/$metadata#People>


File: cl-odata-client.info,  Node: API,  Next: Index,  Prev: CL-ODATA-CLIENT Basic Tutorial,  Up: Top

5 API
*****

* Menu:

* ODATA-CLIENT package::
* ODATA/LANG package::
* ODATA/ENTITY package::


File: cl-odata-client.info,  Node: ODATA-CLIENT package,  Next: ODATA/LANG package,  Up: API

5.1 ODATA-CLIENT package
========================

 -- PACKAGE: ODATA-CLIENT

     Provides core functions for interacting with an ODATA service.

External definitions
====================

Variables
---------

 -- ODATA-CLIENT: *ACCESS-TOKEN*

     ODATA service api token.

 -- ODATA-CLIENT: *SERVICE-ROOT*

     ODATA service base url.

Macros
------

 -- Macro: ODATA-CLIENT:WITH-SERVICE-ROOT (base &body body)

Functions
---------

 -- Function: ODATA-CLIENT:ODATA-POST (uri data &key (json-encode t)
          authorization)

     Make a POST request to ODATA service at URI.
     DATA is the DATA to be posted.  It is encoded using *note
     ENCODE-JSON-TO-STRING: ODATA-CLIENT:ENCODE-JSON-TO-STRING function.

 -- Function: ODATA-CLIENT:ODATA-GET* (uri &rest args &key $filter
          $expand)

     Make an *note ODATA-GET: ODATA-CLIENT:ODATA-GET function. request
     using *note *SERVICE-ROOT*: ODATA-CLIENT:*SERVICE-ROOT* variable.
     as URL base.

 -- Function: ODATA-CLIENT:ODATA-PUT (uri data &key (json-encode t)
          authorization)

     Make a PUT (update) request to ODATA service at URI.
     DATA is the DATA to be posted.  It is encoded using *note
     ENCODE-JSON-TO-STRING: ODATA-CLIENT:ENCODE-JSON-TO-STRING function.

 -- Function: ODATA-CLIENT:ODATA-PATCH (uri data &key (json-encode t)
          authorization)

     Make a PATCH request to ODATA service at URI.
     DATA is the DATA to be posted.  It is encoded using *note
     ENCODE-JSON-TO-STRING: ODATA-CLIENT:ENCODE-JSON-TO-STRING function.

 -- Function: ODATA-CLIENT:ODATA-GET (url &key $filter $expand
          authorization)

     *note GET: COMMON-LISP:GET function. request on an ODATA service at
     URL.
     $FILTER is an ODATA $FILTER expression.
     $EXPAND is an ODATA $EXPAND expression.
     AUTHORIZATION is the AUTHORIZATION token.

     See:
     <http://docs.oasis-open.org/odata/odata/v4.0/errata03/os/complete/part1-protocol/odata-v4.0-errata03-os-part1-protocol-complete.html#_The_>$filter_System

Classes
-------

 -- Class: ODATA-CLIENT:ODATA-REQUEST-ERROR

     Class precedence list: 'odata-request-error, error,
     serious-condition, condition, t'


File: cl-odata-client.info,  Node: ODATA/LANG package,  Next: ODATA/ENTITY package,  Prev: ODATA-CLIENT package,  Up: API

5.2 ODATA/LANG package
======================

 -- PACKAGE: ODATA/LANG

     This package exports functions that are meant to be used with
     arrows syntax to interact with an ODATA service.

External definitions
====================

Functions
---------

 -- Function: ODATA/LANG:FETCH (msgraph::url &optional type)

 -- Function: ODATA/LANG:$FILTER (url exp)

     Add ODATA $filter parameter to URL.

     The $filter system query option allows clients to filter a
     collection of resources that are addressed by a request URL.  The
     expression specified with $filter is evaluated for each resource in
     the collection, and only items where the expression evaluates to
     true are included in the response.  Resources for which the
     expression evaluates to false or to null, or which reference
     properties that are unavailable due to permissions, are omitted
     from the response.

     See: *note ODATA-CLIENT::compile-$filter:
     ODATA-CLIENT:ODATA-CLIENT::compile-$filter function.
     See: <https://www.odata.org/getting-started/basic-tutorial/#filter>

 -- Function: ODATA/LANG:$VALUE (url)

     Address the raw value of a primitive property.

     Example: returns the raw value of property Name of an Airport.
     (-> +trip-pin-modify+
     (collection "Airports") (id "KSFO")
     (property "Name") ($value)

     See:
     <https://www.odata.org/getting-started/basic-tutorial/#propertyVal>

 -- Function: ODATA/LANG:PROPERTY (url name)

     Access the resource property with NAME NAME.

 -- Function: ODATA/LANG:COLLECTION (url name)

     Access the resource collection at NAME.

 -- Function: ODATA/LANG:$SKIP (url skip)

     The $skip query option requests the number of items in the queried
     collection that are to be skipped and not included in the result.

     See:
     <https://www.odata.org/getting-started/basic-tutorial/#topskip>

 -- Function: ODATA/LANG:PATCH (url data)

     Perform a resource *note PATCH: ODATA/LANG:PATCH function. request
     with DATA to ODATA service at URL.

 -- Function: ODATA/LANG:$TOP (url top)

     The $top system query option requests the number of items in the
     queried collection to be included in the result.

     See:
     <https://www.odata.org/getting-started/basic-tutorial/#topskip>

 -- Function: ODATA/LANG:SINGLETON (url name)

     Access the ODATA singleton with NAME NAME at URL.
     See:
     <https://www.odata.org/getting-started/advanced-tutorial/#querySingleton>
     .

 -- Function: ODATA/LANG:POST (msgraph::url &optional msgraph::data)

 -- Function: ODATA/LANG:$COUNT (url)

     The $count system query option allows clients to request a count of
     the matching resources included with the resources in the response.

 -- Function: ODATA/LANG:UPDATE-LINK (url data)

     Update an already existent link.

     A successful PUT request to a single-valued navigation property’s
     reference resource changes the related entity.

     Example: change the Airline of a Flight

     (-> +trip-pin-modify+
     (collection "People")
     (id "russellwhyte")
     (path "Trips(0)"
     "PlanItems(11)"
     "Microsoft.OData.SampleService.Models.TripPin.Flight"
     "Airline")
     (update-link '(("@odata.context" .  ,(*note quri:render-uri:
     QURI:quri:render-uri function. +trip-pin-modify+))
     ("@odata.id" .  "Airlines('FM')"))))

 -- Function: ODATA/LANG:LINK (url data)

     Add a link to a related entity.

     Relationships from one entity to another are represented as
     navigation properties.
     A successful *note POST: ODATA/LANG:POST function. request to a
     navigation property's references collection adds a relationship to
     an existing entity.

     Example: add 'vincentcalabrese' to friends of 'scottketchum'

     (-> +trip-pin-modify+
     (collection "People") (id "scottketchum")
     (property "Friends") ($ref)
     (link '(("@odata.context" .  ,(*note quri:render-uri:
     QURI:quri:render-uri function. +trip-pin-modify+))
     ("@odata.id" .  "People('vincentcalabrese')"))))


 -- Function: ODATA/LANG:$ORDERBY (url property &optional (order :asc))

     The $orderby system query option allows clients to request
     resources in either ascending ORDER using ASC or descending ORDER
     using desc.  If ASC or desc not specified, then the resources will
     be ordered in ascending ORDER.

 -- Function: ODATA/LANG:DEL (url)

     Perform a resource deletion request at ODATA service at URL.

 -- Function: ODATA/LANG:$EXPAND (url exp)

     Add ODATA $expand parameter to URL.

     The $expand system query option specifies the related resources to
     be included in line with retrieved resources.

     EXP is the list of things to expand.

     Examples:

     '("asdf" "foo")) => "asdf,foo"
     '("asdf" "foo" ("Bar" "Baz")) => "asdf,foo,Bar/Baz"

     See: *note ODATA-CLIENT::COMPILE-$EXPAND:
     ODATA-CLIENT:ODATA-CLIENT::COMPILE-$EXPAND function. .
     See: <https://www.odata.org/getting-started/basic-tutorial/#expand>
     .

 -- Function: ODATA/LANG:PATH (url &rest path)

     Access entity in a PATH.

     Example:

     (-> +trip-pin-modify+
     (collection "People")
     (id "russellwhyte")
     (PATH "Trips(0)"
     "PlanItems(11)"
     "Microsoft.OData.SampleService.Models.TripPin.Flight"
     "Airline"))

 -- Function: ODATA/LANG:CREATE (url data)

     Perform a resource creation request with DATA at ODATA service at
     URL.

 -- Function: ODATA/LANG:$SELECT (url exp)

     Adds ODATA $select parameter to URL.

     The $select system query option allows the clients to requests a
     limited set of properties for each entity.

     EXP can be either a string or a list of strings.
     Elements of EXP are just separated by comma.

     Examples:
     (compile-$select "name") => "foo"
     (compile-$select '("name" "surname")) => "name,surname"

     See: *note ODATA-CLIENT::COMPILE-$SELECT:
     ODATA-CLIENT:ODATA-CLIENT::COMPILE-$SELECT function.
     See: <https://www.odata.org/getting-started/basic-tutorial/#select>

 -- Function: ODATA/LANG:UPDATE (url data)

     Perform a resource update (PUT request) with DATA to ODATA service
     at URL.

 -- Function: ODATA/LANG:ID (url id)

     Get ODATA resource ID.

 -- Function: ODATA/LANG:FCALL (url name &rest args)

     Call the ODATA action with NAME NAME and arguments ARGS.

     Actions are operations exposed by an OData service that MAY have
     side effects when invoked.  Actions MAY return data but MUST *note
     NOT: COMMON-LISP:NOT function. be further composed with additional
     path segments.

     See:
     <https://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_Actions>

 -- Function: ODATA/LANG:$SEARCH (url exp)

     The $search system query option restricts the result to include
     only those entities matching the specified search expression.

     See: <https://www.odata.org/getting-started/basic-tutorial/#search>

 -- Function: ODATA/LANG:$REF (url)

     A successful *note POST: ODATA/LANG:POST function. request to a
     navigation property's references collection adds a relationship to
     an existing entity.


File: cl-odata-client.info,  Node: ODATA/ENTITY package,  Prev: ODATA/LANG package,  Up: API

5.3 ODATA/ENTITY package
========================

 -- PACKAGE: ODATA/ENTITY

External definitions
====================

Macros
------

 -- Macro: ODATA/ENTITY:WITH-PROPERTIES (properties entity &body body)

     Bind PROPERTIES in ENTITY.

     Example:

     (with-properties (user-name) user
     (print user-name))

Generic functions
-----------------

 -- Generic-Function: ODATA/ENTITY:ODATA-CONTEXT (sb-pcl::object)

 -- Generic-Function: ODATA/ENTITY:ODATA-NEXT-LINK (sb-pcl::object)

 -- Generic-Function: ODATA/ENTITY:ODATA-ID (sb-pcl::object)

 -- Generic-Function: ODATA/ENTITY:ENTITY-SET-ELEMENTS (sb-pcl::object)

 -- Generic-Function: ODATA/ENTITY:ODATA-ETAG (sb-pcl::object)

 -- Generic-Function: ODATA/ENTITY:ODATA-EDIT-LINK (sb-pcl::object)

Functions
---------

 -- Function: ODATA/ENTITY:READ-ODATA-RESPONSE (data)

     Unserializes an ODATA request response.

 -- Function: ODATA/ENTITY:FIND-SCHEMA (schema-url)

     Return cached schema at SCHEMA-URL, or fetch and add to the cache.

 -- Function: ODATA/ENTITY:FETCH-SCHEMA (schema-url)

     Fetch and parse and ODATA schema from SCHEMA-URL.

 -- Function: ODATA/ENTITY:GET-PROPERTY (entity property-name)

     Get value of property PROPERTY-NAME in ENTITY.

Classes
-------

 -- Class: ODATA/ENTITY:ODATA-ENTITY-SET

     And ODATA entity set.

     Class precedence list: 'odata-entity-set, standard-object, t'

 -- Class: ODATA/ENTITY:ODATA-ENTITY

     An ODATA entity.

     Class precedence list: 'odata-entity, standard-object, t'


File: cl-odata-client.info,  Node: Index,  Prev: API,  Up: Top

6 Index
*******

 [index ]
* Menu:

* cl-odata-client:                       Top.                   (line 6)
* odata-client:                          Top.                   (line 6)

 [index ]
* Menu:

* *ACCESS-TOKEN*:                        ODATA-CLIENT package. (line 16)
* *SERVICE-ROOT*:                        ODATA-CLIENT package. (line 20)
* ODATA-CLIENT:*ACCESS-TOKEN*:           ODATA-CLIENT package. (line 16)
* ODATA-CLIENT:*SERVICE-ROOT*:           ODATA-CLIENT package. (line 20)

 [index ]
* Menu:

* ODATA-CLIENT:ODATA-GET:                ODATA-CLIENT package.
                                                              (line  60)
* ODATA-CLIENT:ODATA-GET <1>:            ODATA-CLIENT package.
                                                              (line  60)
* ODATA-CLIENT:ODATA-GET*:               ODATA-CLIENT package.
                                                              (line  39)
* ODATA-CLIENT:ODATA-GET* <1>:           ODATA-CLIENT package.
                                                              (line  39)
* ODATA-CLIENT:ODATA-PATCH:              ODATA-CLIENT package.
                                                              (line  53)
* ODATA-CLIENT:ODATA-PATCH <1>:          ODATA-CLIENT package.
                                                              (line  53)
* ODATA-CLIENT:ODATA-POST:               ODATA-CLIENT package.
                                                              (line  32)
* ODATA-CLIENT:ODATA-POST <1>:           ODATA-CLIENT package.
                                                              (line  32)
* ODATA-CLIENT:ODATA-PUT:                ODATA-CLIENT package.
                                                              (line  46)
* ODATA-CLIENT:ODATA-PUT <1>:            ODATA-CLIENT package.
                                                              (line  46)
* ODATA-CLIENT:WITH-SERVICE-ROOT:        ODATA-CLIENT package.
                                                              (line  27)
* ODATA-CLIENT:WITH-SERVICE-ROOT <1>:    ODATA-CLIENT package.
                                                              (line  27)
* ODATA/ENTITY:ENTITY-SET-ELEMENTS:      ODATA/ENTITY package.
                                                              (line  32)
* ODATA/ENTITY:ENTITY-SET-ELEMENTS <1>:  ODATA/ENTITY package.
                                                              (line  32)
* ODATA/ENTITY:FETCH-SCHEMA:             ODATA/ENTITY package.
                                                              (line  49)
* ODATA/ENTITY:FETCH-SCHEMA <1>:         ODATA/ENTITY package.
                                                              (line  49)
* ODATA/ENTITY:FIND-SCHEMA:              ODATA/ENTITY package.
                                                              (line  45)
* ODATA/ENTITY:FIND-SCHEMA <1>:          ODATA/ENTITY package.
                                                              (line  45)
* ODATA/ENTITY:GET-PROPERTY:             ODATA/ENTITY package.
                                                              (line  53)
* ODATA/ENTITY:GET-PROPERTY <1>:         ODATA/ENTITY package.
                                                              (line  53)
* ODATA/ENTITY:ODATA-CONTEXT:            ODATA/ENTITY package.
                                                              (line  26)
* ODATA/ENTITY:ODATA-CONTEXT <1>:        ODATA/ENTITY package.
                                                              (line  26)
* ODATA/ENTITY:ODATA-EDIT-LINK:          ODATA/ENTITY package.
                                                              (line  36)
* ODATA/ENTITY:ODATA-EDIT-LINK <1>:      ODATA/ENTITY package.
                                                              (line  36)
* ODATA/ENTITY:ODATA-ETAG:               ODATA/ENTITY package.
                                                              (line  34)
* ODATA/ENTITY:ODATA-ETAG <1>:           ODATA/ENTITY package.
                                                              (line  34)
* ODATA/ENTITY:ODATA-ID:                 ODATA/ENTITY package.
                                                              (line  30)
* ODATA/ENTITY:ODATA-ID <1>:             ODATA/ENTITY package.
                                                              (line  30)
* ODATA/ENTITY:ODATA-NEXT-LINK:          ODATA/ENTITY package.
                                                              (line  28)
* ODATA/ENTITY:ODATA-NEXT-LINK <1>:      ODATA/ENTITY package.
                                                              (line  28)
* ODATA/ENTITY:READ-ODATA-RESPONSE:      ODATA/ENTITY package.
                                                              (line  41)
* ODATA/ENTITY:READ-ODATA-RESPONSE <1>:  ODATA/ENTITY package.
                                                              (line  41)
* ODATA/ENTITY:WITH-PROPERTIES:          ODATA/ENTITY package.
                                                              (line  14)
* ODATA/ENTITY:WITH-PROPERTIES <1>:      ODATA/ENTITY package.
                                                              (line  14)
* ODATA/LANG:$COUNT:                     ODATA/LANG package.  (line  86)
* ODATA/LANG:$COUNT <1>:                 ODATA/LANG package.  (line  86)
* ODATA/LANG:$EXPAND:                    ODATA/LANG package.  (line 142)
* ODATA/LANG:$EXPAND <1>:                ODATA/LANG package.  (line 142)
* ODATA/LANG:$FILTER:                    ODATA/LANG package.  (line  19)
* ODATA/LANG:$FILTER <1>:                ODATA/LANG package.  (line  19)
* ODATA/LANG:$ORDERBY:                   ODATA/LANG package.  (line 131)
* ODATA/LANG:$ORDERBY <1>:               ODATA/LANG package.  (line 131)
* ODATA/LANG:$REF:                       ODATA/LANG package.  (line 226)
* ODATA/LANG:$REF <1>:                   ODATA/LANG package.  (line 226)
* ODATA/LANG:$SEARCH:                    ODATA/LANG package.  (line 219)
* ODATA/LANG:$SEARCH <1>:                ODATA/LANG package.  (line 219)
* ODATA/LANG:$SELECT:                    ODATA/LANG package.  (line 180)
* ODATA/LANG:$SELECT <1>:                ODATA/LANG package.  (line 180)
* ODATA/LANG:$SKIP:                      ODATA/LANG package.  (line  56)
* ODATA/LANG:$SKIP <1>:                  ODATA/LANG package.  (line  56)
* ODATA/LANG:$TOP:                       ODATA/LANG package.  (line  69)
* ODATA/LANG:$TOP <1>:                   ODATA/LANG package.  (line  69)
* ODATA/LANG:$VALUE:                     ODATA/LANG package.  (line  36)
* ODATA/LANG:$VALUE <1>:                 ODATA/LANG package.  (line  36)
* ODATA/LANG:COLLECTION:                 ODATA/LANG package.  (line  52)
* ODATA/LANG:COLLECTION <1>:             ODATA/LANG package.  (line  52)
* ODATA/LANG:CREATE:                     ODATA/LANG package.  (line 175)
* ODATA/LANG:CREATE <1>:                 ODATA/LANG package.  (line 175)
* ODATA/LANG:DEL:                        ODATA/LANG package.  (line 138)
* ODATA/LANG:DEL <1>:                    ODATA/LANG package.  (line 138)
* ODATA/LANG:FCALL:                      ODATA/LANG package.  (line 207)
* ODATA/LANG:FCALL <1>:                  ODATA/LANG package.  (line 207)
* ODATA/LANG:FETCH:                      ODATA/LANG package.  (line  17)
* ODATA/LANG:FETCH <1>:                  ODATA/LANG package.  (line  17)
* ODATA/LANG:ID:                         ODATA/LANG package.  (line 203)
* ODATA/LANG:ID <1>:                     ODATA/LANG package.  (line 203)
* ODATA/LANG:LINK:                       ODATA/LANG package.  (line 111)
* ODATA/LANG:LINK <1>:                   ODATA/LANG package.  (line 111)
* ODATA/LANG:PATCH:                      ODATA/LANG package.  (line  64)
* ODATA/LANG:PATCH <1>:                  ODATA/LANG package.  (line  64)
* ODATA/LANG:PATH:                       ODATA/LANG package.  (line 161)
* ODATA/LANG:PATH <1>:                   ODATA/LANG package.  (line 161)
* ODATA/LANG:POST:                       ODATA/LANG package.  (line  84)
* ODATA/LANG:POST <1>:                   ODATA/LANG package.  (line  84)
* ODATA/LANG:PROPERTY:                   ODATA/LANG package.  (line  48)
* ODATA/LANG:PROPERTY <1>:               ODATA/LANG package.  (line  48)
* ODATA/LANG:SINGLETON:                  ODATA/LANG package.  (line  77)
* ODATA/LANG:SINGLETON <1>:              ODATA/LANG package.  (line  77)
* ODATA/LANG:UPDATE:                     ODATA/LANG package.  (line 198)
* ODATA/LANG:UPDATE <1>:                 ODATA/LANG package.  (line 198)
* ODATA/LANG:UPDATE-LINK:                ODATA/LANG package.  (line  91)
* ODATA/LANG:UPDATE-LINK <1>:            ODATA/LANG package.  (line  91)



Tag Table:
Node: Top272
Node: Intro522
Ref: introduction640
Node: Installation713
Ref: installation833
Node: Usage833
Ref: usage964
Node: CL-ODATA-CLIENT Basic Tutorial964
Node: Introduction1962
Node: Requesting Data3256
Node: Requesting Entity Collections3564
Node: Requesting an Individual Entity by ID8778
Node: Requesting an Individual Property10060
Node: Querying Data11211
Node: Basic predicates built-in functions12246
Node: Filter on Complex Type14433
Node: Filter on Enum Properties16527
Node: System Query Option $orderby21625
Node: System Query Option $top and $skip23112
Node: System Query Option $count26431
Node: System Query Option $expand26872
Node: System Query Option $select29194
Node: System Query Option $search32379
Node: Lambda Operators36644
Node: Data Modification37179
Node: Create an Entity37690
Node: Remove an Entity39708
Node: Update an Entity40121
Node: Relationship Operations40782
Node: Change a Link41544
Node: Functions and Actions42345
Node: Invoking Bound Functions44023
Node: Invoking Unbound Actions45069
Node: Invoking Bound Actions45349
Node: Entities45980
Node: API48983
Ref: api49101
Node: ODATA-CLIENT package49184
Ref: ODATA-CLIENT:*ACCESS-TOKEN* variable49491
Ref: ODATA-CLIENT:*SERVICE-ROOT* variable49556
Ref: ODATA-CLIENT:WITH-SERVICE-ROOT macro49635
Ref: ODATA-CLIENT:ODATA-POST function49717
Ref: ODATA-CLIENT:ODATA-GET* function49999
Ref: ODATA-CLIENT:ODATA-PUT function50247
Ref: ODATA-CLIENT:ODATA-PATCH function50536
Ref: ODATA-CLIENT:ODATA-GET function50820
Ref: ODATA-CLIENT:ODATA-REQUEST-ERROR class51317
Node: ODATA/LANG package51458
Ref: ODATA/LANG:FETCH function51841
Ref: ODATA/LANG:$FILTER function51903
Ref: ODATA/LANG:$VALUE function52671
Ref: ODATA/LANG:PROPERTY function53016
Ref: ODATA/LANG:COLLECTION function53113
Ref: ODATA/LANG:$SKIP function53207
Ref: ODATA/LANG:PATCH function53474
Ref: ODATA/LANG:$TOP function53630
Ref: ODATA/LANG:SINGLETON function53876
Ref: ODATA/LANG:POST function54075
Ref: ODATA/LANG:$COUNT function54145
Ref: ODATA/LANG:UPDATE-LINK function54331
Ref: ODATA/LANG:LINK function54953
Ref: ODATA/LANG:$ORDERBY function55638
Ref: ODATA/LANG:DEL function55955
Ref: ODATA/LANG:$EXPAND function56058
Ref: ODATA/LANG:PATH function56609
Ref: ODATA/LANG:CREATE function56902
Ref: ODATA/LANG:$SELECT function57028
Ref: ODATA/LANG:UPDATE function57634
Ref: ODATA/LANG:ID function57764
Ref: ODATA/LANG:FCALL function57831
Ref: ODATA/LANG:$SEARCH function58291
Ref: ODATA/LANG:$REF function58546
Node: ODATA/ENTITY package58750
Ref: ODATA/ENTITY:WITH-PROPERTIES macro58982
Ref: ODATA/ENTITY:ODATA-CONTEXT function59203
Ref: ODATA/ENTITY:ODATA-NEXT-LINK function59270
Ref: ODATA/ENTITY:ODATA-ID function59339
Ref: ODATA/ENTITY:ENTITY-SET-ELEMENTS function59401
Ref: ODATA/ENTITY:ODATA-ETAG function59474
Ref: ODATA/ENTITY:ODATA-EDIT-LINK function59538
Ref: ODATA/ENTITY:READ-ODATA-RESPONSE function59628
Ref: ODATA/ENTITY:FIND-SCHEMA function59729
Ref: ODATA/ENTITY:FETCH-SCHEMA function59855
Ref: ODATA/ENTITY:GET-PROPERTY function59965
Ref: ODATA/ENTITY:ODATA-ENTITY-SET class60099
Ref: ODATA/ENTITY:ODATA-ENTITY class60237
Node: Index60362

End Tag Table
